import matplotlib.pyplot as plt
import numpy as np

# # Attacked data
# attack = [10978.582598089404, 2924.3970549741334, 4979.051016271932, 3724.366386169495, 3058.8421864010443, 2537.863539351801, 2078.6597720280897, 1813.9593531356518, 1594.0152323624873, 1491.4354415565144, 1304.3579276589696, 1212.7228946875368, 674.4324874202741, 1037.0488036821484, 959.5464245105217, 810.2643096134183, 744.016864319951, 711.6773151232755]
# attacked_drop= [198.025740536151, 119.49555675318909, 192.71349030320496, 205.46280481631825, 288.7637104098758, 214.5841135361349, 217.5178769873609, 216.3638517808529, 265.7038647365388, 235.78600358212077, 205.92337839114995, 259.4111410441681, 123.8246362501162, 284.7804891296968, 256.43202746753127, 244.3188272542583, 246.56527347297646, 213.55992581597795]
# # Normal data
# normal = [11569.739010502577, 2100.826666304451, 4856.431175472593, 3639.3823731032653, 3020.5192397333094, 2579.8893453361698, 2075.672966554881, 1848.4089649962227, 1713.747525510048, 1504.472476335015, 1355.6714743650682, 1250.9883714129985, 694.7000485395544, 1025.307918426215, 955.3007187883092, 864.0689492134467, 795.3766166979507, 726.9284801567725]
# normal_drop =[117.22372625557801, 48.95449919232098, 207.70221932438122, 230.25012513037777, 201.77695817063687, 194.2835362625728, 287.87317947481023, 234.940947761735, 224.50872108583445, 192.80871142983077, 213.90285773263474, 280.91345421730915, 162.64048186279646, 227.4703108664147, 210.30385607120672, 245.07377602133232, 208.64325253533485, 206.89342077751502]
# # X-axis values (assuming both lists have the same length)
# x_values = range(1, len(attack) + 1)

# authenticated ={2: [11005.8607870244, 6353.589429741012, 11879.742492848076, 12511.317138382035, 12620.858997453883, 11969.20026341659, 12095.697312262084, 12184.597507480463, 12435.0591467452, 12346.35582244201], 3: [6799.202527971434, 7125.825370675453, 6692.642751610425, 6793.650387811785, 6819.001904013705, 7292.356384809713, 6975.536869038017, 6438.53011602834, 6600.317874958692, 7189.454859186717], 4: [4445.377083220678, 4652.102417565891, 4846.722080770888, 4851.67289580842, 4806.028958668503, 4889.156905687037, 4929.240530190993, 4803.751799625663, 4712.010550481122, 5032.58102060161]}
# non_authenticated={2: [10957.137527175819, 6378.893779787489, 11653.551047716397, 12066.049261083745, 12015.529840092744, 11882.21875236868, 11959.806102081551, 11791.800129323674, 12360.060116106599, 12512.217968478099], 3: [7041.174578328286, 6719.828070213294, 6754.552191947946, 6664.583201808642, 7079.675736910075, 6878.821989730494, 6969.566886555999, 6255.5961611364955, 6845.235556522685, 7329.495849716033], 4: [4518.018487918369, 4678.169444360425, 4972.390390535208, 4699.108954512078, 4795.870920052666, 5039.925427239772, 4781.131770610196, 4814.075883451769, 5064.479884987844, 5051.734977778313]}
# # # Plotting
# # plt.plot(x_values, attacked_drop, label='Attacked', marker='o', color='red')
# # plt.plot(x_values, normal_drop, label='Normal', marker='x', color='blue')

# # # Adding labels and title
# # plt.xlabel('Data Point')
# # plt.ylabel('Values')
# # plt.title('Attacked vs. Normal Data')

# # # Adding legend
# # plt.legend()

# # # Displaying the plot
# # plt.show()

# # Plotting
# fig, ax = plt.subplots()

# for key in authenticated:
#     ax.plot(range(1, 6), authenticated[key][:5], label=f"Authenticated, k={key}")

# for key in non_authenticated:
#     ax.plot(range(1, 6), non_authenticated[key][:5], label=f"Non-authenticated, k={key}")

# ax.set_xlabel('Iteration')
# ax.set_ylabel('Time (ms)')
# ax.set_title('Comparison of Authenticated and Non-authenticated Times (First 5 elements)')
# ax.legend()
# plt.show()

# data = {
#     0: [1645.2971006289474, 1859.091000843058, 1853.058777917031, 1748.6147537706809, 1762.2515376752083, 1765.521150064815, 1749.534187245385, 1699.5787794471214, 1734.0519402732145, 1718.2478776010646], 1: [1437.1734826577133, 1872.9627840527653, 1802.5170929364008, 1808.1832607443935, 1792.1402064156534, 1720.147948004768, 1770.5320250805646, 1744.306364201476, 1710.4855579957, 1336.0869974821155], 2: [1812.7298241950127, 1858.5956031946826, 1826.3734931729014, 1805.416481909524, 1790.1661826565992, 1790.0606003325663, 1752.4734464510589, 1737.59485078109, 1730.1065359915344, 1320.5966699082567], 3: [1871.716890491536, 1855.6592620493184, 1833.0630982305977, 1778.9486521386107, 1798.5892713203882, 1765.1226560850414, 1779.4595655734554, 1749.7806363974366, 1333.1551642032437, 1725.5071337289708], 4: [1876.4488695391083, 1856.5694512153177, 1839.6701402512617, 1816.9389466313387, 1788.2462815148212, 1788.0696255561195, 1762.7358309317963, 1741.3131336674048, 1322.4594562375148, 1737.4045259716033]
# }

# averages = []

# # Iterate over each index position in the lists
# for i in range(len(data[0])):
#     # Initialize sum for this index position
#     index_sum = 0
    
#     # Calculate sum of values at this index position across all keys
#     for key in data:
#         index_sum += data[key][i]
    
#     # Calculate average for this index position and append to averages list
#     averages.append(index_sum / len(data))

# print(averages)
# auth_throughput =[1791.9772079465768, 1783.5311133295077, 1748.6811452364595, 1722.5844568957336, 1717.4994003543957, 1699.19587759063, 1682.7028950778817, 1662.494384525544, 1635.8186379219749, 1631.5103481984602]
# non_auth_throughput =[1807.881258375101, 1795.5786580481947, 1760.9207612019509, 1728.5793340914286, 1720.1588264964887, 1699.2233903540439, 1694.8576524204898, 1666.9516530735211, 1654.9180096030034, 1644.62211718999]

# non_auth_fidelity =[0.8759472006548401, 0.8490026508358273, 0.8232179572541878, 0.7985431926890105, 0.774930579088648, 0.7523343950575021, 0.7307108873251038, 0.710018186026139, 0.6902162236272871, 0.671266657343971]
# auth_fidelity =[0.8759472006548401, 0.8490026508358273, 0.8232179572541878, 0.7985431926890105, 0.774930579088648, 0.7523343950575021, 0.7307108873251038, 0.710018186026139, 0.6902162236272871, 0.671266657343971]
# performance_reduction= np.array(non_auth_fidelity) - np.array(auth_fidelity)


# percentage_diff = np.mean(performance_reduction)/np.mean(auth_fidelity)

# print(percentage_diff*100)



auth_throughput = [1791.9772079465768, 1783.5311133295077, 1748.6811452364595, 1722.5844568957336, 1717.4994003543957, 1699.19587759063, 1682.7028950778817, 1662.494384525544, 1635.8186379219749, 1631.5103481984602]
non_auth_throughput = [1807.881258375101, 1795.5786580481947, 1760.9207612019509, 1728.5793340914286, 1720.1588264964887, 1699.2233903540439, 1694.8576524204898, 1666.9516530735211, 1654.9180096030034, 1644.62211718999]

# Create a list of x values (assuming sequential indices)
x_values = range(len(auth_throughput))

# Plot auth_throughput
plt.plot(x_values, auth_throughput, label='With Authentication')

# Plot non_auth_throughput
plt.plot(x_values, non_auth_throughput, label='Without Authentication')

# Add labels and title
plt.xlabel('Sample Index')
plt.ylabel('Throughput')
plt.title('Comparison of Throughput with and without Authentication')
plt.legend()

# Show the plot
plt.show()


[0.8759472006548401, 0.8490026508358273, 0.8232179572541878, 0.7985431926890105, 0.774930579088648, 0.7523343950575021, 0.7307108873251038, 0.710018186026139, 0.6902162236272871, 0.671266657343971]

[0.8759472006548401, 0.839494873473072, 0.805165364566675, 0.7728350506232629, 0.7423875075917149, 0.7137130914298224, 0.6867085432673155, 0.6612766175624, 0.6373257319127607, 0.6147696372599984]